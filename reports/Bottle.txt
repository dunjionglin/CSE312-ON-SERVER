Bottle: Python Web Framework (https://bottlepy.org/docs/dev/)
This framework will be used as a server framework for the project.

What it accomplishes:

Bottle is used for receiving http requests between clients and servers to recieve or send data between both ends. For now, this framework helps accomplish sending index.html, css stylesheet, JS front-end code and app logo to clients to display the basics of the app.
  
How it works:

app = Bottle() (https://bottlepy.org/docs/dev/api.html#bottle.Bottle)
	Bottle is a class in the Bottle framework, when called, it will create a single, distinct web application with functions to call on the handle requests for this project. The default parameter for this is set to be true to handle all exceptions, when false, it will let debugging middleware to handle exceptions.

app.route() (https://bottlepy.org/docs/dev/api.html#bottle.Bottle.route)
Route(path, method='GET', callback=None, **options) in Bottle, the path parameter is the specific path in the URL that you want to look at when receiving requests from the client side. the method parameter will be used to specify which type of the request needs to be handled, 'GET' for HTTP GET request, ‘POST' for HTTP POST request and so on. By default, the method will be set to 'GET', callback will be set to None and other parameter options could be found in Plugin.apply() (https://bottlepy.org/docs/dev/plugindev.html#bottle.Plugin.apply). The path could take a single path or list of patches to listen on. When received a request, the route will check the header to find the path and method, if a match is found, it will execute the defined function below. For example, when the request path is “/” and method is “GET”, app.route() will trigger our defined function to send out index.html to client side with static_file() that will be explained later. 

static_file()
	The source code of this function is located under Application Helper. This function takes in a filename, root parameter with other five parameters: mimetype(default true), download(default false), charset(default UTF-8) etag(default None) and headers(default None). Which this filename will take in a path to the file for static_file to look up the file, with root specify the absolute directory path. Then the mimetype will guess a mime type for the file that will be sent to the client, based on the file extension with default setting. The download parameter will enable the client side to download the content or not with a charset default to UTF-8, if require specific header to be included into the response, it will be inputted on header parameter. Then the static_file will generate an http response with correct http header contents and body to send to the client. It will also check for the filename, if a file does not exist a 404 will be sent. If the filename starts with root, 403 will be sent or do not have read permission. Encoding will be gathered from parameters and added to headers map, as well as content-type, content-disposition, content-length, last-modified, date, etag, accept-range, content-range and content-length. All these are either calculated by system functions, or from input arguments. Then the fully built HTTP response will be sent to HTTPResponse() to be sent to the client. This is how static_file sends files to clients.
  
 app.run() (https://bottlepy.org/docs/dev/api.html#bottle.run)
	The run function will take in app(default None) which is used to specify WSGI application, server(default wsgiref) to specify which server adapter to use. Host and port will be host and port the web application will be host on. Reloader and quiet(default False) and plugins, debug and config with default None. reloader will check on bottle_lockerfile and interval, if it has reload state, the program will end, else keep running. For quiet when false, it will start up the server and listen on connection. Else will not start. Plugin will be used to install any plugin that is needed for the server and config will update configuration accordingly. Debug will be used to identify if debug mode on for develop to debug the server. This is how Bottle set up servers and run. 

MIT License: (https://bottlepy.org/docs/dev/index.html#license)
Copyright (c) 2009-2018, Marcel Hellkamp.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
